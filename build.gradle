apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
    repositories {
        maven {
            url "https://maven.google.com"
        }
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.google.gms:google-services:4.3.3'
    }
}

ext {
    Repo = 'Maven'

    publishedGroupId = 'com.clevertap.android'
    libraryName = 'clevertap-segment-integration'
    artifact = 'clevertap-segment-android'
    libraryDescription = 'CleverTap Integration for Segment Android Analytics'

    siteUrl = 'https://github.com/CleverTap/clevertap-segment-android'
    gitUrl = 'https://github.com/CleverTap/clevertap-segment-android.git'

    libraryVersion = '1.2.1'


    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'http://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["developerId"] = ''
ext["developerName"] = ''
ext["developerEmail"] = ''

version = libraryVersion
group = publishedGroupId


android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.getName().toLowerCase().contains('release')) {
                outputFileName = "${artifact}-${libraryVersion}.aar"
            } else if (variant.getName().toLowerCase().contains('debug')) {
                outputFileName = "${artifact}-${variant.name}-${libraryVersion}.aar"
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    properties.each { name, value ->
        ext[name] = value
    }
}else{
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId publishedGroupId
                artifactId artifact
                version version

                artifact sourcesJar

                pom {
                    name = artifact
                    description = libraryDescription
                    url = siteUrl
                    packaging = "aar"
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                        // Add all other devs here...
                    }
                    // Version control info - if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/CleverTap/clevertap-android-sdk.git'
                        developerConnection = 'scm:git:ssh:github.com/CleverTap/clevertap-android-sdk.git'
                        url = 'https://github.com/CleverTap/clevertap-android-sdk/tree/master'
                    }
                }
            }
        }
        // The repository to publish to, Sonatype/MavenCentral
        repositories {
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = Repo
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

dependencies {
    repositories {
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }

    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.segment.analytics.android:analytics:4.9.4'
    compileOnly 'androidx.annotation:annotation:1.1.0'

    implementation 'com.clevertap.android:clevertap-android-sdk:4.1.1'

    testImplementation 'junit:junit:4.12'
    testImplementation('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    testImplementation 'com.segment.analytics.android:analytics-tests:4.5.0'

    testImplementation 'org.assertj:assertj-core:2.6.0'

    testImplementation 'org.powermock:powermock:1.6.2'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    testImplementation "org.json:json:20140107"
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

}
